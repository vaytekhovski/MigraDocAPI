// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MigraDoc.Core;

namespace MigraDoc.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210111083702_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("addressArea")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressArrivalCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressBuildingNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressFlatNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressHamlet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressHouseNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressPhone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressRegion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressStreet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressVillage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.AddressDuringWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserDetailId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("addressArea")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressBuildingNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressFlatNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressHamlet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressHouseNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressRegion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressStreet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressVillage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("livePeriod")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.ToTable("AddressDuringWorks");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("place")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("serie")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Change", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserDetailId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("changedFirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("changedSecondName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("changedSurname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("reason")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserDetailId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("documentStatus")
                        .HasColumnType("int");

                    b.Property<int>("documentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("diplomaDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("diplomaNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("educationCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("educationEndYear")
                        .HasColumnType("int");

                    b.Property<string>("educationOrgName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.EducationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.ToTable("EducationInfos");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.FullName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("engName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("engSurname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("firstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("secondName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("FullNames");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Kinsfolk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserDetailId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("addressId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("alive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("areOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("childNameAndOrganizationNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("childType")
                        .HasColumnType("int");

                    b.Property<string>("citizenship")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("cityOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("countryOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("firstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("placeOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("placeOfWorkOrStudy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("positionOrSpeciality")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("regionOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("secondName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("sex")
                        .HasColumnType("int");

                    b.Property<string>("surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<Guid>("workId")
                        .HasColumnType("char(36)");

                    b.Property<int>("yearOfDeath")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.HasIndex("addressId");

                    b.HasIndex("workId");

                    b.ToTable("Kinsfolks");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.KinsfolkWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("placeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("KinsfolkWork");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.MigrationCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("issuingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("serie")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("MigrationCards");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.MigrationReg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("issuingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("validityDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MigrationRegs");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Passport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("issueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("issuingCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("issuingPlace")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("serie")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("validity")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.RusLangDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("issueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("serie")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RusLangDocuments");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.UserDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("addressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("authorityName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("birthAddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("certificateId")
                        .HasColumnType("char(36)");

                    b.Property<string>("citizenship")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("creed")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("dateOfGetCitithenship")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("degree")
                        .HasColumnType("int");

                    b.Property<Guid>("educationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("fullNameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("isChangeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("maritalStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("migrationCardId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("migrationRegistrationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("nationality")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("passportId")
                        .HasColumnType("char(36)");

                    b.Property<string>("placeOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("rusLangDocumentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("sex")
                        .HasColumnType("int");

                    b.Property<Guid>("workFromWhoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("addressId");

                    b.HasIndex("birthAddressId");

                    b.HasIndex("certificateId");

                    b.HasIndex("educationId");

                    b.HasIndex("fullNameId");

                    b.HasIndex("isChangeId");

                    b.HasIndex("migrationCardId");

                    b.HasIndex("migrationRegistrationId");

                    b.HasIndex("passportId");

                    b.HasIndex("rusLangDocumentId");

                    b.HasIndex("workFromWhoId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserDetailId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("addressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("period")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("placeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.HasIndex("addressId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.WorkAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("addressArea")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressHamlet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressHouseNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressRegion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressStreet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressVillage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("WorkAddress");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.WorkFromWho", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("positionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<DateTime>("workPeriod")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("WorkFromWhos");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.isChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("firstName")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("secondName")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("surname")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("isChanges");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("tgId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.AddressDuringWork", b =>
                {
                    b.HasOne("MigraDoc.Core.Models.FullData.UserDetail", null)
                        .WithMany("addressDuringWork")
                        .HasForeignKey("UserDetailId");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Change", b =>
                {
                    b.HasOne("MigraDoc.Core.Models.FullData.UserDetail", null)
                        .WithMany("changes")
                        .HasForeignKey("UserDetailId");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Document", b =>
                {
                    b.HasOne("MigraDoc.Core.Models.FullData.UserDetail", null)
                        .WithMany("Documents")
                        .HasForeignKey("UserDetailId");
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.EducationInfo", b =>
                {
                    b.HasOne("MigraDoc.Core.Models.FullData.Education", null)
                        .WithMany("infoAboutProf")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Kinsfolk", b =>
                {
                    b.HasOne("MigraDoc.Core.Models.FullData.UserDetail", null)
                        .WithMany("kinsfolks")
                        .HasForeignKey("UserDetailId");

                    b.HasOne("MigraDoc.Core.Models.FullData.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.KinsfolkWork", "work")
                        .WithMany()
                        .HasForeignKey("workId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.UserDetail", b =>
                {
                    b.HasOne("MigraDoc.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.Address", "birthAddress")
                        .WithMany()
                        .HasForeignKey("birthAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.Certificate", "certificate")
                        .WithMany()
                        .HasForeignKey("certificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.Education", "education")
                        .WithMany()
                        .HasForeignKey("educationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.FullName", "fullName")
                        .WithMany()
                        .HasForeignKey("fullNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.isChange", "isChange")
                        .WithMany()
                        .HasForeignKey("isChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.MigrationCard", "migrationCard")
                        .WithMany()
                        .HasForeignKey("migrationCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.MigrationReg", "migrationRegistration")
                        .WithMany()
                        .HasForeignKey("migrationRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.Passport", "passport")
                        .WithMany()
                        .HasForeignKey("passportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.RusLangDocument", "rusLangDocument")
                        .WithMany()
                        .HasForeignKey("rusLangDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Models.FullData.WorkFromWho", "workFromWho")
                        .WithMany()
                        .HasForeignKey("workFromWhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MigraDoc.Core.Models.FullData.Work", b =>
                {
                    b.HasOne("MigraDoc.Core.Models.FullData.UserDetail", null)
                        .WithMany("works")
                        .HasForeignKey("UserDetailId");

                    b.HasOne("MigraDoc.Core.Models.FullData.WorkAddress", "address")
                        .WithMany()
                        .HasForeignKey("addressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
