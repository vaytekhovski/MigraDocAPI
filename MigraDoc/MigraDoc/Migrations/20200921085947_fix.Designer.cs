// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MigraDoc.WebAPI;

namespace MigraDoc.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200921085947_fix")]
    partial class fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MigraDoc.Core.Entities.AddressEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Build")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("District")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Flat")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Housing")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Region")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("index")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.EducationEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Present")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Sertificate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.EducationLevelEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("DoktorNauk")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Doshkolnoe")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("KandidatNauk")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NachalnoeObshee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OsnovnoeObshee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SredneeObshee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SredneeProfessionalnoe")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VissheeBakalavriat")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VissheePodgotovkaKadrov")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VissheeSpecialitetMagistratura")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.FamilyStatusEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssuePlace")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MarriageCertificateNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("FamilyStatuses");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.IdentityDocumentEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IssueAgency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IssueDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Series")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("IdentityDocuments");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.IncomeEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("currency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.IncomeListEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BankDepositId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MainIncomeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OtherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OtherIncomeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SecuritiesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SocialPaymentsId")
                        .HasColumnType("char(36)");

                    b.HasKey("id");

                    b.HasIndex("BankDepositId");

                    b.HasIndex("MainIncomeId");

                    b.HasIndex("OtherId");

                    b.HasIndex("OtherIncomeId");

                    b.HasIndex("SecuritiesId");

                    b.HasIndex("SocialPaymentsId");

                    b.ToTable("IncomeLists");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.NameChangesEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangeReason")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PreviusFirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PreviusMiddleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PreviusSurname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("UserDataEntityid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("id");

                    b.HasIndex("UserDataEntityid");

                    b.ToTable("NameChanges");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.NationalityEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("DateIsUnknown")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DateOfReceiving")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HandlyDateOfReceiving")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LossCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LossDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LossReason")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PlaceOfReceiving")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("StatelessPerson")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.RelativesEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ChildType")
                        .HasColumnType("int");

                    b.Property<Guid>("CountryOfResidenceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("KinsfolkType")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("MiddleNameAbsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("NationalityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SexType")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("UserDataEntityid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("WorkOrStudyOrganizationName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WorkOrStudyPosition")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("alive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.HasIndex("CountryOfResidenceId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("UserDataEntityid");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.RussianKnowledgeEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("RussianKnowledge")
                        .HasColumnType("int");

                    b.Property<string>("SertificateName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("RussianKnowledges");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.UnreleasedConvictionEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Place")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("Term")
                        .HasColumnType("time(6)");

                    b.HasKey("id");

                    b.ToTable("UnreleasedConvictions");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.UserDataEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CountryOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Creed")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EducationLevelId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EngFirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EngSurname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("IdentityDocumentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IncomeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("MiddleNameAbsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("NationalityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("ResidenceAddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RussianKnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UnreleasedConvictionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("VnjBase")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkPermitId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("rvp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("vnj")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.HasIndex("EducationId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("IdentityDocumentId");

                    b.HasIndex("IncomeId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ResidenceAddressId");

                    b.HasIndex("RussianKnowledgeId");

                    b.HasIndex("UnreleasedConvictionId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkPermitId");

                    b.ToTable("UserDatas");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("telegramUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.WorkEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserDataEntityid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserDataEntityid");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.WorkPermitEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Series")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("WorkPermits");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.IncomeListEntity", b =>
                {
                    b.HasOne("MigraDoc.Core.Entities.IncomeEntity", "BankDeposit")
                        .WithMany()
                        .HasForeignKey("BankDepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.IncomeEntity", "MainIncome")
                        .WithMany()
                        .HasForeignKey("MainIncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.IncomeEntity", "Other")
                        .WithMany()
                        .HasForeignKey("OtherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.IncomeEntity", "OtherIncome")
                        .WithMany()
                        .HasForeignKey("OtherIncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.IncomeEntity", "Securities")
                        .WithMany()
                        .HasForeignKey("SecuritiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.IncomeEntity", "SocialPayments")
                        .WithMany()
                        .HasForeignKey("SocialPaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.NameChangesEntity", b =>
                {
                    b.HasOne("MigraDoc.Core.Entities.UserDataEntity", null)
                        .WithMany("NameChanges")
                        .HasForeignKey("UserDataEntityid");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.RelativesEntity", b =>
                {
                    b.HasOne("MigraDoc.Core.Entities.AddressEntity", "CountryOfResidence")
                        .WithMany()
                        .HasForeignKey("CountryOfResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.NationalityEntity", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.UserDataEntity", null)
                        .WithMany("Relatives")
                        .HasForeignKey("UserDataEntityid");
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.UserDataEntity", b =>
                {
                    b.HasOne("MigraDoc.Core.Entities.EducationEntity", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.EducationLevelEntity", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.IdentityDocumentEntity", "IdentityDocument")
                        .WithMany()
                        .HasForeignKey("IdentityDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.IncomeListEntity", "Income")
                        .WithMany()
                        .HasForeignKey("IncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.NationalityEntity", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.AddressEntity", "ResidenceAddress")
                        .WithMany()
                        .HasForeignKey("ResidenceAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.RussianKnowledgeEntity", "RussianKnowledge")
                        .WithMany()
                        .HasForeignKey("RussianKnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.UnreleasedConvictionEntity", "UnreleasedConviction")
                        .WithMany()
                        .HasForeignKey("UnreleasedConvictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.WorkPermitEntity", "WorkPermit")
                        .WithMany()
                        .HasForeignKey("WorkPermitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MigraDoc.Core.Entities.WorkEntity", b =>
                {
                    b.HasOne("MigraDoc.Core.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraDoc.Core.Entities.UserDataEntity", null)
                        .WithMany("Works")
                        .HasForeignKey("UserDataEntityid");
                });
#pragma warning restore 612, 618
        }
    }
}
